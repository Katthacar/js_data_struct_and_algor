<ul><li><a class="l" href="#pf1" data-dest-detail='[1,"Fit"]'>Cover</a></li><li><a class="l" href="#pf2" data-dest-detail='[2,"XYZ",0,598.606,null]'>Title Page</a></li><li><a class="l" href="#pf3" data-dest-detail='[3,"XYZ",0,598.606,null]'>Copyright and Credits</a></li><li><a class="l" href="#pf4" data-dest-detail='[4,"XYZ",0,598.606,null]'>Dedication</a></li><li><a class="l" href="#pf5" data-dest-detail='[5,"XYZ",0,598.606,null]'>Packt Upsell</a></li><li><a class="l" href="#pf6" data-dest-detail='[6,"XYZ",0,591.211,null]'>Contributors</a></li><li><a class="l" href="#pf8" data-dest-detail='[8,"XYZ",0,666.142,null]'>Table of Contents</a></li><li><a class="l" href="#pf10" data-dest-detail='[16,"XYZ",0,591.211,null]'>Preface</a></li><li><a class="l" href="#pf16" data-dest-detail='[22,"XYZ",0,525.323,null]'>Chapter 1: JavaScript â€“ A Quick Overview</a><ul><li><a class="l" href="#pf17" data-dest-detail='[23,"XYZ",0,598.606,null]'>JavaScript data structure and algorithms</a></li><li><a class="l" href="#pf17" data-dest-detail='[23,"XYZ",0,317.853,null]'>Setting up the environment</a><ul><li><a class="l" href="#pf18" data-dest-detail='[24,"XYZ",0,598.606,null]'>The minimum setup to work with JavaScript</a></li><li><a class="l" href="#pf19" data-dest-detail='[25,"XYZ",0,335.594,null]'>Using web servers</a></li><li><a class="l" href="#pf1c" data-dest-detail='[28,"XYZ",0,598.606,null]'>Node.js http-server</a></li></ul></li><li><a class="l" href="#pf1d" data-dest-detail='[29,"XYZ",0,598.606,null]'>JavaScript basics</a><ul><li><a class="l" href="#pf1e" data-dest-detail='[30,"XYZ",0,468.768,null]'>Variables</a><ul><li><a class="l" href="#pf20" data-dest-detail='[32,"XYZ",0,598.606,null]'>Scope variable</a></li></ul></li><li><a class="l" href="#pf21" data-dest-detail='[33,"XYZ",0,551.806,null]'>Operators</a></li><li><a class="l" href="#pf24" data-dest-detail='[36,"XYZ",0,357.463,null]'>Truthy and falsy</a></li><li><a class="l" href="#pf25" data-dest-detail='[37,"XYZ",0,319.606,null]'>Functions of the equals operators (== and ===)</a></li><li><a class="l" href="#pf28" data-dest-detail='[40,"XYZ",0,598.606,null]'>Control structures</a><ul><li><a class="l" href="#pf28" data-dest-detail='[40,"XYZ",0,525.967,null]'>Conditional statements</a></li><li><a class="l" href="#pf2a" data-dest-detail='[42,"XYZ",0,598.606,null]'>Loops</a></li></ul></li><li><a class="l" href="#pf2b" data-dest-detail='[43,"XYZ",0,598.606,null]'>Functions</a></li><li><a class="l" href="#pf2c" data-dest-detail='[44,"XYZ",0,598.606,null]'>Object-oriented programming in JavaScript</a></li></ul></li><li><a class="l" href="#pf2d" data-dest-detail='[45,"XYZ",0,222.572,null]'>Debugging and tools</a><ul><li><a class="l" href="#pf2e" data-dest-detail='[46,"XYZ",0,288.472,null]'>Debugging with VSCode</a></li></ul></li><li><a class="l" href="#pf30" data-dest-detail='[48,"XYZ",0,525.247,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf31" data-dest-detail='[49,"XYZ",0,525.323,null]'>Chapter 2: ECMAScript and TypeScript Overview</a><ul><li><a class="l" href="#pf31" data-dest-detail='[49,"XYZ",0,268.495,null]'>ECMAScript or JavaScript?</a><ul><li><a class="l" href="#pf32" data-dest-detail='[50,"XYZ",0,598.606,null]'>ES6, ES2015, ES7, ES2016, ES8, ES2017, and ES.Next</a><ul><li><a class="l" href="#pf32" data-dest-detail='[50,"XYZ",0,199.543,null]'>The compatibility table</a></li></ul></li><li><a class="l" href="#pf34" data-dest-detail='[52,"XYZ",0,539.17,null]'>Using Babel.js</a></li></ul></li><li><a class="l" href="#pf34" data-dest-detail='[52,"XYZ",0,186.891,null]'>ECMAScript 2015+ functionalities</a><ul><li><a class="l" href="#pf35" data-dest-detail='[53,"XYZ",0,464.857,null]'>let and const instead of var</a><ul><li><a class="l" href="#pf37" data-dest-detail='[55,"XYZ",0,598.606,null]'>Variables scope with let and const</a></li></ul></li><li><a class="l" href="#pf38" data-dest-detail='[56,"XYZ",0,184.781,null]'>Template literals</a></li><li><a class="l" href="#pf39" data-dest-detail='[57,"XYZ",0,271.645,null]'>Arrow functions</a></li><li><a class="l" href="#pf3a" data-dest-detail='[58,"XYZ",0,277.968,null]'>Default parameter values for functions</a></li><li><a class="l" href="#pf3b" data-dest-detail='[59,"XYZ",0,221.047,null]'>Declaring the spread and rest operators</a></li><li><a class="l" href="#pf3c" data-dest-detail='[60,"XYZ",0,324.768,null]'>Enhanced object properties</a></li><li><a class="l" href="#pf3e" data-dest-detail='[62,"XYZ",0,524.118,null]'>Object-oriented programming with classes</a><ul><li><a class="l" href="#pf3f" data-dest-detail='[63,"XYZ",0,539.206,null]'>Inheritance</a></li><li><a class="l" href="#pf40" data-dest-detail='[64,"XYZ",0,598.606,null]'>Working with getters and setters</a></li></ul></li><li><a class="l" href="#pf41" data-dest-detail='[65,"XYZ",0,598.606,null]'>Exponentiation operator</a></li><li><a class="l" href="#pf41" data-dest-detail='[65,"XYZ",0,244.488,null]'>Modules</a><ul><li><a class="l" href="#pf44" data-dest-detail='[68,"XYZ",0,538.827,null]'>Running ES2015 modules in the browser and with Node.js</a><ul><li><a class="l" href="#pf46" data-dest-detail='[70,"XYZ",0,598.606,null]'>Using native ES2015 imports in Node.js</a></li></ul></li><li><a class="l" href="#pf47" data-dest-detail='[71,"XYZ",0,598.606,null]'>Running ES2015 modules in the browser</a></li><li><a class="l" href="#pf48" data-dest-detail='[72,"XYZ",0,211.311,null]'>ES2015+ backward compatibility</a></li></ul></li></ul></li><li><a class="l" href="#pf49" data-dest-detail='[73,"XYZ",0,453.769,null]'>Introducing TypeScript</a><ul><li><a class="l" href="#pf4a" data-dest-detail='[74,"XYZ",0,353.568,null]'>Type inference</a></li><li><a class="l" href="#pf4b" data-dest-detail='[75,"XYZ",0,488.127,null]'>Interfaces</a><ul><li><a class="l" href="#pf4d" data-dest-detail='[77,"XYZ",0,419.047,null]'>Generics</a></li></ul></li><li><a class="l" href="#pf4e" data-dest-detail='[78,"XYZ",0,598.606,null]'>Other TypeScript functionalities</a></li><li><a class="l" href="#pf4e" data-dest-detail='[78,"XYZ",0,420.367,null]'>TypeScript compile-time checking in JavaScript files</a></li></ul></li><li><a class="l" href="#pf4f" data-dest-detail='[79,"XYZ",0,400.957,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf50" data-dest-detail='[80,"XYZ",0,525.323,null]'>Chapter 3: Arrays</a><ul><li><a class="l" href="#pf50" data-dest-detail='[80,"XYZ",0,368.882,null]'>Why should we use arrays?</a></li><li><a class="l" href="#pf51" data-dest-detail='[81,"XYZ",0,501.157,null]'>Creating and initializing arrays</a><ul><li><a class="l" href="#pf52" data-dest-detail='[82,"XYZ",0,598.606,null]'>Accessing elements and iterating an array</a></li></ul></li><li><a class="l" href="#pf53" data-dest-detail='[83,"XYZ",0,504.327,null]'>Adding elements</a><ul><li><a class="l" href="#pf53" data-dest-detail='[83,"XYZ",0,392.167,null]'>Inserting an element at the end of the array</a><ul><li><a class="l" href="#pf53" data-dest-detail='[83,"XYZ",0,213.247,null]'>Using the push method</a></li></ul></li><li><a class="l" href="#pf54" data-dest-detail='[84,"XYZ",0,598.606,null]'>Inserting an element in the first position</a><ul><li><a class="l" href="#pf55" data-dest-detail='[85,"XYZ",0,598.606,null]'>Using the unshift method</a></li></ul></li></ul></li><li><a class="l" href="#pf55" data-dest-detail='[85,"XYZ",0,462.208,null]'>Removing elements</a><ul><li><a class="l" href="#pf55" data-dest-detail='[85,"XYZ",0,383.128,null]'>Removing an element from the end of the array</a></li><li><a class="l" href="#pf55" data-dest-detail='[85,"XYZ",0,219.049,null]'>Removing an element from the first position</a><ul><li><a class="l" href="#pf57" data-dest-detail='[87,"XYZ",0,432.327,null]'>Using the shift method</a></li></ul></li></ul></li><li><a class="l" href="#pf57" data-dest-detail='[87,"XYZ",0,246.928,null]'>Adding and removing elements from a specific position</a></li><li><a class="l" href="#pf59" data-dest-detail='[89,"XYZ",0,598.606,null]'>Two-dimensional and multi-dimensional arrays</a><ul><li><a class="l" href="#pf5a" data-dest-detail='[90,"XYZ",0,437.786,null]'>Iterating the elements of two-dimensional arrays</a></li><li><a class="l" href="#pf5b" data-dest-detail='[91,"XYZ",0,598.606,null]'>Multi-dimensional arrays</a></li></ul></li><li><a class="l" href="#pf5c" data-dest-detail='[92,"XYZ",0,551.127,null]'>References for JavaScript array methods</a><ul><li><a class="l" href="#pf5d" data-dest-detail='[93,"XYZ",0,473.976,null]'>Joining multiple arrays</a></li><li><a class="l" href="#pf5d" data-dest-detail='[93,"XYZ",0,247.338,null]'>Iterator functions</a><ul><li><a class="l" href="#pf5e" data-dest-detail='[94,"XYZ",0,419.305,null]'>Iterating using the every method</a></li><li><a class="l" href="#pf5e" data-dest-detail='[94,"XYZ",0,280.027,null]'>Iterating using the some method</a></li><li><a class="l" href="#pf5f" data-dest-detail='[95,"XYZ",0,598.606,null]'>Iterating using forEach</a></li><li><a class="l" href="#pf5f" data-dest-detail='[95,"XYZ",0,508.567,null]'>Using map and filter</a></li><li><a class="l" href="#pf5f" data-dest-detail='[95,"XYZ",0,251.812,null]'>Using the reduce method</a></li></ul></li><li><a class="l" href="#pf60" data-dest-detail='[96,"XYZ",0,516.927,null]'>ECMAScript 6 and new array functionalities</a><ul><li><a class="l" href="#pf61" data-dest-detail='[97,"XYZ",0,549.768,null]'>Iterating using the for...of loop</a></li><li><a class="l" href="#pf61" data-dest-detail='[97,"XYZ",0,423.769,null]'>Using the @@iterator object</a></li><li><a class="l" href="#pf62" data-dest-detail='[98,"XYZ",0,598.606,null]'>Array entries, keys, and values</a></li><li><a class="l" href="#pf63" data-dest-detail='[99,"XYZ",0,452.127,null]'>Using the from method</a></li><li><a class="l" href="#pf63" data-dest-detail='[99,"XYZ",0,271.449,null]'>Using the Array.of method</a></li><li><a class="l" href="#pf64" data-dest-detail='[100,"XYZ",0,483.007,null]'>Using the fill method</a></li><li><a class="l" href="#pf65" data-dest-detail='[101,"XYZ",0,598.606,null]'>Using the copyWithin method</a></li></ul></li><li><a class="l" href="#pf65" data-dest-detail='[101,"XYZ",0,364.77,null]'>Sorting elements</a><ul><li><a class="l" href="#pf66" data-dest-detail='[102,"XYZ",0,273.009,null]'>Custom sorting</a></li><li><a class="l" href="#pf67" data-dest-detail='[103,"XYZ",0,478.447,null]'>Sorting strings</a></li></ul></li><li><a class="l" href="#pf68" data-dest-detail='[104,"XYZ",0,391.809,null]'>Searching</a><ul><li><a class="l" href="#pf69" data-dest-detail='[105,"XYZ",0,598.606,null]'>ECMAScript 2015 - the find and findIndex methods</a></li><li><a class="l" href="#pf69" data-dest-detail='[105,"XYZ",0,371.529,null]'>ECMAScript 2016 - using the includes method</a></li></ul></li><li><a class="l" href="#pf6a" data-dest-detail='[106,"XYZ",0,598.606,null]'>Outputting the array into a string</a></li></ul></li><li><a class="l" href="#pf6a" data-dest-detail='[106,"XYZ",0,226.17,null]'>The TypedArray class</a></li><li><a class="l" href="#pf6c" data-dest-detail='[108,"XYZ",0,598.606,null]'>Arrays in TypeScript</a></li><li><a class="l" href="#pf6d" data-dest-detail='[109,"XYZ",0,515.413,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf6e" data-dest-detail='[110,"XYZ",0,525.323,null]'>Chapter 4: Stacks</a><ul><li><a class="l" href="#pf6e" data-dest-detail='[110,"XYZ",0,272.172,null]'>Creating a JavaScript data structure and algorithm library</a></li><li><a class="l" href="#pf70" data-dest-detail='[112,"XYZ",0,282.098,null]'>The stack data structure</a><ul><li><a class="l" href="#pf71" data-dest-detail='[113,"XYZ",0,353.186,null]'>Creating an array-based Stack class</a></li><li><a class="l" href="#pf72" data-dest-detail='[114,"XYZ",0,477.619,null]'>Pushing elements to the stack</a></li><li><a class="l" href="#pf72" data-dest-detail='[114,"XYZ",0,299.581,null]'>Popping elements from the stack</a></li><li><a class="l" href="#pf73" data-dest-detail='[115,"XYZ",0,598.606,null]'>Peeking the element from the top of the stack</a></li><li><a class="l" href="#pf73" data-dest-detail='[115,"XYZ",0,278.288,null]'>Verifying whether the stack is empty</a></li><li><a class="l" href="#pf74" data-dest-detail='[116,"XYZ",0,495.768,null]'>Clearing the elements of the stack</a></li><li><a class="l" href="#pf74" data-dest-detail='[116,"XYZ",0,322.009,null]'>Using the Stack class</a></li></ul></li><li><a class="l" href="#pf76" data-dest-detail='[118,"XYZ",0,477.896,null]'>Creating a JavaScript object-based Stack class</a><ul><li><a class="l" href="#pf77" data-dest-detail='[119,"XYZ",0,551.127,null]'>Pushing elements to the stack</a></li><li><a class="l" href="#pf77" data-dest-detail='[119,"XYZ",0,198.691,null]'>Verifying whether the stack is empty and its size</a></li><li><a class="l" href="#pf78" data-dest-detail='[120,"XYZ",0,522.327,null]'>Popping elements from the stack</a></li><li><a class="l" href="#pf79" data-dest-detail='[121,"XYZ",0,598.606,null]'>Peeking the top of the stack and clearing it</a></li><li><a class="l" href="#pf79" data-dest-detail='[121,"XYZ",0,302.767,null]'>Creating the toString method</a></li></ul></li><li><a class="l" href="#pf7a" data-dest-detail='[122,"XYZ",0,404.409,null]'>Protecting the internal elements of the data structure</a><ul><li><a class="l" href="#pf7b" data-dest-detail='[123,"XYZ",0,511.288,null]'>The underscore naming convention</a></li><li><a class="l" href="#pf7b" data-dest-detail='[123,"XYZ",0,314.809,null]'>ES2015 classes with scoped symbols</a></li><li><a class="l" href="#pf7c" data-dest-detail='[124,"XYZ",0,336.009,null]'>ES2015 classes with WeakMap</a></li><li><a class="l" href="#pf7d" data-dest-detail='[125,"XYZ",0,362.1,null]'>ECMAScript class field proposal</a></li></ul></li><li><a class="l" href="#pf7e" data-dest-detail='[126,"XYZ",0,425.568,null]'>Solving problems using stacks</a><ul><li><a class="l" href="#pf7e" data-dest-detail='[126,"XYZ",0,248.608,null]'>Converting decimal numbers to binary</a><ul><li><a class="l" href="#pf80" data-dest-detail='[128,"XYZ",0,523.006,null]'>The base converter algorithm</a></li></ul></li></ul></li><li><a class="l" href="#pf81" data-dest-detail='[129,"XYZ",0,465.406,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf82" data-dest-detail='[130,"XYZ",0,525.323,null]'>Chapter 5: Queues and Deques</a><ul><li><a class="l" href="#pf82" data-dest-detail='[130,"XYZ",0,310.688,null]'>The queue data structure</a><ul><li><a class="l" href="#pf83" data-dest-detail='[131,"XYZ",0,374.636,null]'>Creating the Queue class</a><ul><li><a class="l" href="#pf84" data-dest-detail='[132,"XYZ",0,339.982,null]'>Enqueuing elements to the queue</a></li><li><a class="l" href="#pf85" data-dest-detail='[133,"XYZ",0,598.606,null]'>Dequeuing elements from the queue</a></li><li><a class="l" href="#pf86" data-dest-detail='[134,"XYZ",0,598.606,null]'>Peeking the element from the front of the queue</a></li><li><a class="l" href="#pf86" data-dest-detail='[134,"XYZ",0,441.967,null]'>Verifying whether the queue is empty and its size</a></li><li><a class="l" href="#pf87" data-dest-detail='[135,"XYZ",0,598.606,null]'>Clearing the queue</a></li><li><a class="l" href="#pf87" data-dest-detail='[135,"XYZ",0,465.367,null]'>Creating the toString method</a></li></ul></li><li><a class="l" href="#pf88" data-dest-detail='[136,"XYZ",0,598.606,null]'>Using the Queue class</a></li></ul></li><li><a class="l" href="#pf89" data-dest-detail='[137,"XYZ",0,419.548,null]'>The deque data structure</a><ul><li><a class="l" href="#pf8a" data-dest-detail='[138,"XYZ",0,598.606,null]'>Creating the Deque class</a><ul><li><a class="l" href="#pf8b" data-dest-detail='[139,"XYZ",0,598.606,null]'>Adding elements to the front of the deque</a></li></ul></li><li><a class="l" href="#pf8c" data-dest-detail='[140,"XYZ",0,460.209,null]'>Using the Deque class</a></li></ul></li><li><a class="l" href="#pf8c" data-dest-detail='[140,"XYZ",0,178.066,null]'>Solving problems using queues and deques</a><ul><li><a class="l" href="#pf8d" data-dest-detail='[141,"XYZ",0,598.606,null]'>The circular queue â€“ Hot Potato</a></li><li><a class="l" href="#pf8f" data-dest-detail='[143,"XYZ",0,598.606,null]'>Palindrome checker</a></li><li><a class="l" href="#pf90" data-dest-detail='[144,"XYZ",0,320.011,null]'>JavaScript task queues</a></li></ul></li><li><a class="l" href="#pf91" data-dest-detail='[145,"XYZ",0,598.606,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf92" data-dest-detail='[146,"XYZ",0,525.323,null]'>Chapter 6: Linked Lists</a><ul><li><a class="l" href="#pf92" data-dest-detail='[146,"XYZ",0,267.504,null]'>The linked list data structure</a><ul><li><a class="l" href="#pf94" data-dest-detail='[148,"XYZ",0,564.406,null]'>Creating the LinkedList class</a><ul><li><a class="l" href="#pf96" data-dest-detail='[150,"XYZ",0,598.606,null]'>Pushing elements to the end of the linked list</a></li><li><a class="l" href="#pf98" data-dest-detail='[152,"XYZ",0,598.606,null]'>Removing elements from the linked list from a specific position</a></li><li><a class="l" href="#pf9a" data-dest-detail='[154,"XYZ",0,335.83,null]'>Looping through the list until we get to the desired position</a><ul><li><a class="l" href="#pf9b" data-dest-detail='[155,"XYZ",0,448.491,null]'>Refactoring the remove method</a></li></ul></li><li><a class="l" href="#pf9b" data-dest-detail='[155,"XYZ",0,288.972,null]'>Inserting an element at any position</a></li><li><a class="l" href="#pf9e" data-dest-detail='[158,"XYZ",0,598.606,null]'>The indexOf method: returning the position of an element</a></li><li><a class="l" href="#pf9f" data-dest-detail='[159,"XYZ",0,598.606,null]'>Removing an element from the linked list</a></li><li><a class="l" href="#pf9f" data-dest-detail='[159,"XYZ",0,387.19,null]'>The isEmpty, size, and getHead methods</a></li><li><a class="l" href="#pfa0" data-dest-detail='[160,"XYZ",0,525.922,null]'>The toString method</a></li></ul></li></ul></li><li><a class="l" href="#pfa1" data-dest-detail='[161,"XYZ",0,598.606,null]'>Doubly linked lists</a><ul><li><a class="l" href="#pfa2" data-dest-detail='[162,"XYZ",0,379.209,null]'>Inserting a new element at any position</a></li><li><a class="l" href="#pfa5" data-dest-detail='[165,"XYZ",0,512.647,null]'>Removing elements from any position</a></li></ul></li><li><a class="l" href="#pfa7" data-dest-detail='[167,"XYZ",0,344.154,null]'>Circular linked lists</a><ul><li><a class="l" href="#pfa8" data-dest-detail='[168,"XYZ",0,308.309,null]'>Inserting a new element at any position</a></li><li><a class="l" href="#pfaa" data-dest-detail='[170,"XYZ",0,431.777,null]'>Removing elements from any position</a></li></ul></li><li><a class="l" href="#pfab" data-dest-detail='[171,"XYZ",0,281.812,null]'>Sorted linked lists</a><ul><li><a class="l" href="#pfac" data-dest-detail='[172,"XYZ",0,353.77,null]'>Inserting elements in order</a></li></ul></li><li><a class="l" href="#pfad" data-dest-detail='[173,"XYZ",0,240.096,null]'>Creating the StackLinkedList class</a></li><li><a class="l" href="#pfaf" data-dest-detail='[175,"XYZ",0,394.527,null]'>Summary</a></li></ul></li><li><a class="l" href="#pfb0" data-dest-detail='[176,"XYZ",0,525.323,null]'>Chapter 7: Sets</a><ul><li><a class="l" href="#pfb0" data-dest-detail='[176,"XYZ",0,301.85,null]'>Structuring aÂ dataset</a></li><li><a class="l" href="#pfb1" data-dest-detail='[177,"XYZ",0,483.37,null]'>Creating a Set class</a><ul><li><a class="l" href="#pfb2" data-dest-detail='[178,"XYZ",0,531.538,null]'>The has(element) method</a></li><li><a class="l" href="#pfb3" data-dest-detail='[179,"XYZ",0,598.606,null]'>The add method</a></li><li><a class="l" href="#pfb3" data-dest-detail='[179,"XYZ",0,346.408,null]'>The delete and clear methods</a></li><li><a class="l" href="#pfb4" data-dest-detail='[180,"XYZ",0,296.409,null]'>The size method</a></li><li><a class="l" href="#pfb5" data-dest-detail='[181,"XYZ",0,233.611,null]'>The values method</a></li><li><a class="l" href="#pfb6" data-dest-detail='[182,"XYZ",0,350.647,null]'>Using the Set class</a></li></ul></li><li><a class="l" href="#pfb7" data-dest-detail='[183,"XYZ",0,576.327,null]'>Set operations</a><ul><li><a class="l" href="#pfb7" data-dest-detail='[183,"XYZ",0,210.916,null]'>Set union</a></li><li><a class="l" href="#pfba" data-dest-detail='[186,"XYZ",0,487.374,null]'>Set intersection</a><ul><li><a class="l" href="#pfbc" data-dest-detail='[188,"XYZ",0,598.606,null]'>Improving the intersection method</a></li></ul></li><li><a class="l" href="#pfbc" data-dest-detail='[188,"XYZ",0,134.703,null]'>Set difference</a></li><li><a class="l" href="#pfbe" data-dest-detail='[190,"XYZ",0,326.77,null]'>Subset</a></li></ul></li><li><a class="l" href="#pfc0" data-dest-detail='[192,"XYZ",0,231.127,null]'>ECMAScript 2015Â â€“ the Set class</a><ul><li><a class="l" href="#pfc1" data-dest-detail='[193,"XYZ",0,339.365,null]'>ES2015 Set class operations</a><ul><li><a class="l" href="#pfc2" data-dest-detail='[194,"XYZ",0,598.606,null]'>Simulating the union operation</a></li><li><a class="l" href="#pfc2" data-dest-detail='[194,"XYZ",0,443.767,null]'>Simulating the intersection operation</a></li><li><a class="l" href="#pfc2" data-dest-detail='[194,"XYZ",0,221.248,null]'>Simulating the difference operation</a></li><li><a class="l" href="#pfc3" data-dest-detail='[195,"XYZ",0,476.647,null]'>Using the spread operator</a></li></ul></li></ul></li><li><a class="l" href="#pfc4" data-dest-detail='[196,"XYZ",0,487.442,null]'>Multisets or bags</a></li><li><a class="l" href="#pfc4" data-dest-detail='[196,"XYZ",0,310.366,null]'>Summary</a></li></ul></li><li><a class="l" href="#pfc5" data-dest-detail='[197,"XYZ",0,525.323,null]'>Chapter 8: Dictionaries and Hashes</a><ul><li><a class="l" href="#pfc5" data-dest-detail='[197,"XYZ",0,267.529,null]'>The dictionary data structure</a><ul><li><a class="l" href="#pfc6" data-dest-detail='[198,"XYZ",0,251.371,null]'>Creating the Dictionary class</a><ul><li><a class="l" href="#pfc9" data-dest-detail='[201,"XYZ",0,507.819,null]'>Verifying whether a key exists in the dictionary</a></li><li><a class="l" href="#pfc9" data-dest-detail='[201,"XYZ",0,307.102,null]'>Setting a key and value in the dictionary andÂ the ValuePair class</a></li><li><a class="l" href="#pfca" data-dest-detail='[202,"XYZ",0,285.132,null]'>Removing a value from the dictionary</a></li><li><a class="l" href="#pfcb" data-dest-detail='[203,"XYZ",0,549.768,null]'>Retrieving a value from the dictionary</a></li><li><a class="l" href="#pfcb" data-dest-detail='[203,"XYZ",0,194.013,null]'>The keys, values, and valuePairs methods</a></li><li><a class="l" href="#pfcd" data-dest-detail='[205,"XYZ",0,202.731,null]'>Iterating each ValuePair of the dictionary with forEach</a></li><li><a class="l" href="#pfce" data-dest-detail='[206,"XYZ",0,383.929,null]'>The clear, size, isEmpty, and toString methods</a></li></ul></li><li><a class="l" href="#pfcf" data-dest-detail='[207,"XYZ",0,322.729,null]'>Using the Dictionary class</a></li></ul></li><li><a class="l" href="#pfd1" data-dest-detail='[209,"XYZ",0,598.606,null]'>The hash table</a><ul><li><a class="l" href="#pfd2" data-dest-detail='[210,"XYZ",0,598.606,null]'>Creating a HashTable class</a><ul><li><a class="l" href="#pfd2" data-dest-detail='[210,"XYZ",0,331.258,null]'>Creating a hash function</a></li><li><a class="l" href="#pfd3" data-dest-detail='[211,"XYZ",0,363.211,null]'>Putting a key and a value in the hash table</a></li><li><a class="l" href="#pfd4" data-dest-detail='[212,"XYZ",0,510.609,null]'>Retrieving a value from the hash table</a></li><li><a class="l" href="#pfd4" data-dest-detail='[212,"XYZ",0,263.533,null]'>Removing a value from the hash table</a></li></ul></li><li><a class="l" href="#pfd5" data-dest-detail='[213,"XYZ",0,463.809,null]'>Using the HashTable class</a></li><li><a class="l" href="#pfd7" data-dest-detail='[215,"XYZ",0,598.606,null]'>Hash table versus hash set</a></li><li><a class="l" href="#pfd7" data-dest-detail='[215,"XYZ",0,441.331,null]'>Handling collisions between hash tables</a><ul><li><a class="l" href="#pfd9" data-dest-detail='[217,"XYZ",0,399.538,null]'>Separate chaining</a><ul><li><a class="l" href="#pfda" data-dest-detail='[218,"XYZ",0,405.529,null]'>The put method</a></li><li><a class="l" href="#pfdb" data-dest-detail='[219,"XYZ",0,598.606,null]'>The get method</a></li><li><a class="l" href="#pfdc" data-dest-detail='[220,"XYZ",0,470.091,null]'>The remove method</a></li></ul></li><li><a class="l" href="#pfdd" data-dest-detail='[221,"XYZ",0,408.652,null]'>Linear probing</a><ul><li><a class="l" href="#pfe0" data-dest-detail='[224,"XYZ",0,499.283,null]'>The put method</a></li><li><a class="l" href="#pfe2" data-dest-detail='[226,"XYZ",0,598.606,null]'>The get method</a></li><li><a class="l" href="#pfe2" data-dest-detail='[226,"XYZ",0,165.172,null]'>The remove method</a></li></ul></li></ul></li><li><a class="l" href="#pfe5" data-dest-detail='[229,"XYZ",0,480.58,null]'>Creating better hash functions</a></li></ul></li><li><a class="l" href="#pfe6" data-dest-detail='[230,"XYZ",0,320.722,null]'>The ES2015 Map class</a></li><li><a class="l" href="#pfe7" data-dest-detail='[231,"XYZ",0,371.765,null]'>The ES2015 WeakMap and WeakSet classes</a></li><li><a class="l" href="#pfe8" data-dest-detail='[232,"XYZ",0,321.609,null]'>Summary</a></li></ul></li><li><a class="l" href="#pfe9" data-dest-detail='[233,"XYZ",0,525.323,null]'>Chapter 9: Recursion</a><ul><li><a class="l" href="#pfe9" data-dest-detail='[233,"XYZ",0,327.572,null]'>Understanding recursion</a></li><li><a class="l" href="#pfea" data-dest-detail='[234,"XYZ",0,230.302,null]'>Calculating the factorial of a number</a><ul><li><a class="l" href="#pfeb" data-dest-detail='[235,"XYZ",0,598.606,null]'>Iterative factorial</a></li><li><a class="l" href="#pfeb" data-dest-detail='[235,"XYZ",0,361.929,null]'>Recursive factorial</a><ul><li><a class="l" href="#pfec" data-dest-detail='[236,"XYZ",0,491.727,null]'>The call stack</a></li><li><a class="l" href="#pfee" data-dest-detail='[238,"XYZ",0,598.606,null]'>JavaScript limitation on the call stack size</a></li></ul></li></ul></li><li><a class="l" href="#pfef" data-dest-detail='[239,"XYZ",0,598.606,null]'>The Fibonacci sequence</a><ul><li><a class="l" href="#pfef" data-dest-detail='[239,"XYZ",0,446.581,null]'>IterativeÂ Fibonacci</a></li><li><a class="l" href="#pfef" data-dest-detail='[239,"XYZ",0,223.781,null]'>Recursive Fibonacci</a></li><li><a class="l" href="#pff0" data-dest-detail='[240,"XYZ",0,368.248,null]'>Fibonacci with memoization</a></li></ul></li><li><a class="l" href="#pff1" data-dest-detail='[241,"XYZ",0,549.768,null]'>Why use recursion? Is it faster?</a></li><li><a class="l" href="#pff2" data-dest-detail='[242,"XYZ",0,598.606,null]'>Summary</a></li></ul></li><li><a class="l" href="#pff3" data-dest-detail='[243,"XYZ",0,525.323,null]'>Chapter 10: Trees</a><ul><li><a class="l" href="#pff4" data-dest-detail='[244,"XYZ",0,598.606,null]'>The tree data structure</a></li><li><a class="l" href="#pff4" data-dest-detail='[244,"XYZ",0,257.006,null]'>Tree terminology</a></li><li><a class="l" href="#pff6" data-dest-detail='[246,"XYZ",0,598.606,null]'>The binary and binary search trees</a><ul><li><a class="l" href="#pff6" data-dest-detail='[246,"XYZ",0,456.453,null]'>Creating the Node and BinarySearchTree classes</a></li><li><a class="l" href="#pff8" data-dest-detail='[248,"XYZ",0,577.006,null]'>Inserting a key into the BST</a></li></ul></li><li><a class="l" href="#pffb" data-dest-detail='[251,"XYZ",0,286.584,null]'>Tree traversal</a><ul><li><a class="l" href="#pffc" data-dest-detail='[252,"XYZ",0,598.606,null]'>In-order traversal</a></li><li><a class="l" href="#pffd" data-dest-detail='[253,"XYZ",0,343.118,null]'>Pre-order traversal</a></li><li><a class="l" href="#pffe" data-dest-detail='[254,"XYZ",0,299.998,null]'>Post-order traversal</a></li></ul></li><li><a class="l" href="#pf100" data-dest-detail='[256,"XYZ",0,598.606,null]'>Searching for values in a tree</a><ul><li><a class="l" href="#pf100" data-dest-detail='[256,"XYZ",0,475.947,null]'>Searching for minimum and maximum values</a></li><li><a class="l" href="#pf102" data-dest-detail='[258,"XYZ",0,598.606,null]'>Searching for a specific value</a></li><li><a class="l" href="#pf104" data-dest-detail='[260,"XYZ",0,428.461,null]'>Removing a node</a><ul><li><a class="l" href="#pf106" data-dest-detail='[262,"XYZ",0,598.606,null]'>Removing a leaf node</a></li><li><a class="l" href="#pf106" data-dest-detail='[262,"XYZ",0,184.882,null]'>Removing a node with a left or right child</a></li><li><a class="l" href="#pf107" data-dest-detail='[263,"XYZ",0,360.968,null]'>Removing a node with two children</a></li></ul></li></ul></li><li><a class="l" href="#pf108" data-dest-detail='[264,"XYZ",0,417.986,null]'>Self-balancing trees</a><ul><li><a class="l" href="#pf109" data-dest-detail='[265,"XYZ",0,526.533,null]'>Adelson-Velskii and Landiâ€™s tree (AVL tree)</a><ul><li><a class="l" href="#pf10a" data-dest-detail='[266,"XYZ",0,598.606,null]'>Height of a node and the balancing factor</a></li><li><a class="l" href="#pf10c" data-dest-detail='[268,"XYZ",0,598.606,null]'>Balancing operationsâ€“ AVL rotations</a><ul><li><a class="l" href="#pf10c" data-dest-detail='[268,"XYZ",0,449.725,null]'>Left-left case: single rotation to the right</a></li><li><a class="l" href="#pf10d" data-dest-detail='[269,"XYZ",0,387.748,null]'>Right-right case: single rotation to the left</a></li><li><a class="l" href="#pf10e" data-dest-detail='[270,"XYZ",0,362.474,null]'>Left-right case: double rotation to the right</a></li><li><a class="l" href="#pf110" data-dest-detail='[272,"XYZ",0,598.606,null]'>Right-left case â€“ double rotation to the left</a></li></ul></li><li><a class="l" href="#pf111" data-dest-detail='[273,"XYZ",0,404.509,null]'>Inserting a node in the AVL tree</a></li><li><a class="l" href="#pf112" data-dest-detail='[274,"XYZ",0,280.35,null]'>Removing a node from the AVL tree</a></li></ul></li><li><a class="l" href="#pf114" data-dest-detail='[276,"XYZ",0,537.168,null]'>Red-Black tree</a><ul><li><a class="l" href="#pf115" data-dest-detail='[277,"XYZ",0,598.606,null]'>Inserting a node in the Red-Black tree</a><ul><li><a class="l" href="#pf116" data-dest-detail='[278,"XYZ",0,303.168,null]'>Verifying the Red-Black tree properties after insertion</a></li><li><a class="l" href="#pf11b" data-dest-detail='[283,"XYZ",0,598.606,null]'>Red-Black tree rotations</a></li></ul></li></ul></li></ul></li><li><a class="l" href="#pf11c" data-dest-detail='[284,"XYZ",0,492.406,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf11d" data-dest-detail='[285,"XYZ",0,525.323,null]'>Chapter 11: Binary Heap and Heap Sort</a><ul><li><a class="l" href="#pf11d" data-dest-detail='[285,"XYZ",0,329.585,null]'>The binary heap data structure</a><ul><li><a class="l" href="#pf11e" data-dest-detail='[286,"XYZ",0,291.275,null]'>Creating the MinHeap class</a><ul><li><a class="l" href="#pf11f" data-dest-detail='[287,"XYZ",0,528.847,null]'>Binary tree array representation</a></li><li><a class="l" href="#pf120" data-dest-detail='[288,"XYZ",0,366.229,null]'>Inserting a value into the heap</a><ul><li><a class="l" href="#pf121" data-dest-detail='[289,"XYZ",0,598.606,null]'>The sift up operation</a></li></ul></li><li><a class="l" href="#pf123" data-dest-detail='[291,"XYZ",0,557.206,null]'>Finding the minimum or maximum value from the heap</a></li><li><a class="l" href="#pf123" data-dest-detail='[291,"XYZ",0,222.408,null]'>Extracting the minimum or maximum value from the heap</a><ul><li><a class="l" href="#pf124" data-dest-detail='[292,"XYZ",0,373.809,null]'>The sift down operation (heapify)</a></li></ul></li></ul></li><li><a class="l" href="#pf126" data-dest-detail='[294,"XYZ",0,503.206,null]'>Creating the MaxHeap class</a></li></ul></li><li><a class="l" href="#pf127" data-dest-detail='[295,"XYZ",0,568.006,null]'>The heap sort algorithm</a></li><li><a class="l" href="#pf129" data-dest-detail='[297,"XYZ",0,464.342,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf12a" data-dest-detail='[298,"XYZ",0,525.323,null]'>Chapter 12: Graphs</a><ul><li><a class="l" href="#pf12a" data-dest-detail='[298,"XYZ",0,263.888,null]'>Graph terminology</a><ul><li><a class="l" href="#pf12c" data-dest-detail='[300,"XYZ",0,423.634,null]'>Directed and undirected graphs</a></li></ul></li><li><a class="l" href="#pf12d" data-dest-detail='[301,"XYZ",0,365.22,null]'>Representing a graph</a><ul><li><a class="l" href="#pf12d" data-dest-detail='[301,"XYZ",0,273.54,null]'>The adjacency matrix</a></li><li><a class="l" href="#pf12e" data-dest-detail='[302,"XYZ",0,373.91,null]'>The adjacency list</a></li><li><a class="l" href="#pf12f" data-dest-detail='[303,"XYZ",0,598.606,null]'>The incidence matrix</a></li></ul></li><li><a class="l" href="#pf12f" data-dest-detail='[303,"XYZ",0,304.355,null]'>Creating the Graph class</a></li><li><a class="l" href="#pf133" data-dest-detail='[307,"XYZ",0,598.606,null]'>Graph traversals</a><ul><li><a class="l" href="#pf134" data-dest-detail='[308,"XYZ",0,294.219,null]'>Breadth-first search (BFS)</a><ul><li><a class="l" href="#pf137" data-dest-detail='[311,"XYZ",0,533.806,null]'>Finding the shortest paths using BFS</a></li><li><a class="l" href="#pf13a" data-dest-detail='[314,"XYZ",0,513.327,null]'>Further study on the shortest paths algorithms</a></li></ul></li><li><a class="l" href="#pf13a" data-dest-detail='[314,"XYZ",0,337.02,null]'>Depth-first search (DFS)</a><ul><li><a class="l" href="#pf13e" data-dest-detail='[318,"XYZ",0,513.59,null]'>Exploring the DFS algorithm</a></li><li><a class="l" href="#pf141" data-dest-detail='[321,"XYZ",0,598.606,null]'>Topological sorting using DFS</a></li></ul></li></ul></li><li><a class="l" href="#pf143" data-dest-detail='[323,"XYZ",0,598.606,null]'>Shortest path algorithms</a><ul><li><a class="l" href="#pf144" data-dest-detail='[324,"XYZ",0,598.606,null]'>Dijkstra&apos;s algorithm</a></li><li><a class="l" href="#pf146" data-dest-detail='[326,"XYZ",0,431.206,null]'>The Floyd-Warshall algorithm</a></li></ul></li><li><a class="l" href="#pf147" data-dest-detail='[327,"XYZ",0,234.97,null]'>Minimum spanning tree (MST)</a><ul><li><a class="l" href="#pf148" data-dest-detail='[328,"XYZ",0,429.613,null]'>Prim&apos;s algorithm</a></li><li><a class="l" href="#pf14a" data-dest-detail='[330,"XYZ",0,503.206,null]'>Kruskal&apos;s algorithm</a></li></ul></li><li><a class="l" href="#pf14c" data-dest-detail='[332,"XYZ",0,598.606,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf14d" data-dest-detail='[333,"XYZ",0,525.323,null]'>Chapter 13: Sorting and Searching Algorithms</a><ul><li><a class="l" href="#pf14d" data-dest-detail='[333,"XYZ",0,223.113,null]'>Sorting algorithms</a><ul><li><a class="l" href="#pf14e" data-dest-detail='[334,"XYZ",0,516.468,null]'>The bubble sort</a><ul><li><a class="l" href="#pf151" data-dest-detail='[337,"XYZ",0,598.606,null]'>The improved bubble sort</a></li></ul></li><li><a class="l" href="#pf152" data-dest-detail='[338,"XYZ",0,598.606,null]'>The selection sort</a></li><li><a class="l" href="#pf153" data-dest-detail='[339,"XYZ",0,281.221,null]'>The insertion sort</a></li><li><a class="l" href="#pf155" data-dest-detail='[341,"XYZ",0,236.436,null]'>The merge sort</a></li><li><a class="l" href="#pf158" data-dest-detail='[344,"XYZ",0,296.107,null]'>The quick sort</a><ul><li><a class="l" href="#pf15a" data-dest-detail='[346,"XYZ",0,488.179,null]'>The partition process</a></li><li><a class="l" href="#pf15b" data-dest-detail='[347,"XYZ",0,412.932,null]'>The quick sort in action</a></li></ul></li><li><a class="l" href="#pf15e" data-dest-detail='[350,"XYZ",0,288.748,null]'>The counting sort</a></li><li><a class="l" href="#pf160" data-dest-detail='[352,"XYZ",0,241.536,null]'>The bucket sort</a></li><li><a class="l" href="#pf163" data-dest-detail='[355,"XYZ",0,399.086,null]'>The radix sort</a></li></ul></li><li><a class="l" href="#pf165" data-dest-detail='[357,"XYZ",0,242.609,null]'>Searching algorithms</a><ul><li><a class="l" href="#pf166" data-dest-detail='[358,"XYZ",0,598.606,null]'>The sequential search</a></li><li><a class="l" href="#pf167" data-dest-detail='[359,"XYZ",0,598.606,null]'>The binary search</a></li><li><a class="l" href="#pf169" data-dest-detail='[361,"XYZ",0,598.606,null]'>The interpolation search</a></li></ul></li><li><a class="l" href="#pf16b" data-dest-detail='[363,"XYZ",0,598.606,null]'>Shuffle algorithms</a><ul><li><a class="l" href="#pf16b" data-dest-detail='[363,"XYZ",0,503.326,null]'>The Fisher-Yates shuffle</a></li></ul></li><li><a class="l" href="#pf16c" data-dest-detail='[364,"XYZ",0,339.086,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf16d" data-dest-detail='[365,"XYZ",0,525.323,null]'>Chapter 14: Algorithm Designs and Techniques</a><ul><li><a class="l" href="#pf16d" data-dest-detail='[365,"XYZ",0,226.448,null]'>Divide and conquer</a><ul><li><a class="l" href="#pf16e" data-dest-detail='[366,"XYZ",0,427.525,null]'>Binary search</a></li></ul></li><li><a class="l" href="#pf170" data-dest-detail='[368,"XYZ",0,598.606,null]'>Dynamic programming</a><ul><li><a class="l" href="#pf171" data-dest-detail='[369,"XYZ",0,517.606,null]'>The minimum coin change problem</a></li><li><a class="l" href="#pf173" data-dest-detail='[371,"XYZ",0,258.661,null]'>The knapsack problem</a></li><li><a class="l" href="#pf176" data-dest-detail='[374,"XYZ",0,233.647,null]'>The longest common subsequence</a></li><li><a class="l" href="#pf179" data-dest-detail='[377,"XYZ",0,358.61,null]'>Matrix chain multiplication</a></li></ul></li><li><a class="l" href="#pf17c" data-dest-detail='[380,"XYZ",0,598.606,null]'>Greedy algorithms</a><ul><li><a class="l" href="#pf17c" data-dest-detail='[380,"XYZ",0,418.69,null]'>The min-coin change problem</a></li><li><a class="l" href="#pf17d" data-dest-detail='[381,"XYZ",0,265.33,null]'>The fractional knapsack problem</a></li></ul></li><li><a class="l" href="#pf17f" data-dest-detail='[383,"XYZ",0,598.606,null]'>Backtracking algorithms</a><ul><li><a class="l" href="#pf17f" data-dest-detail='[383,"XYZ",0,349.82,null]'>Rat in a Maze</a></li><li><a class="l" href="#pf182" data-dest-detail='[386,"XYZ",0,598.606,null]'>Sudoku Solver</a></li></ul></li><li><a class="l" href="#pf185" data-dest-detail='[389,"XYZ",0,310.606,null]'>Introduction to functional programming</a><ul><li><a class="l" href="#pf186" data-dest-detail='[390,"XYZ",0,598.606,null]'>Functional versus imperative programming</a></li><li><a class="l" href="#pf187" data-dest-detail='[391,"XYZ",0,407.536,null]'>ES2015+ and functional programming</a></li><li><a class="l" href="#pf188" data-dest-detail='[392,"XYZ",0,393.811,null]'>The JavaScript functional toolbox â€“Â map, filter, and reduce</a></li><li><a class="l" href="#pf18b" data-dest-detail='[395,"XYZ",0,598.606,null]'>JavaScript functional libraries and data structures</a></li></ul></li><li><a class="l" href="#pf18b" data-dest-detail='[395,"XYZ",0,316.21,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf18d" data-dest-detail='[397,"XYZ",0,525.323,null]'>Chapter 15: Algorithm Complexity</a><ul><li><a class="l" href="#pf18d" data-dest-detail='[397,"XYZ",0,428.282,null]'>Big O notation</a><ul><li><a class="l" href="#pf18e" data-dest-detail='[398,"XYZ",0,598.606,null]'>Understanding big O notation</a><ul><li><a class="l" href="#pf18e" data-dest-detail='[398,"XYZ",0,505.726,null]'>O(1)</a></li><li><a class="l" href="#pf18e" data-dest-detail='[398,"XYZ",0,332.922,null]'>O(n)</a></li><li><a class="l" href="#pf190" data-dest-detail='[400,"XYZ",0,598.606,null]'>O(n2)</a></li></ul></li><li><a class="l" href="#pf191" data-dest-detail='[401,"XYZ",0,598.606,null]'>Comparing complexities</a><ul><li><a class="l" href="#pf192" data-dest-detail='[402,"XYZ",0,420.027,null]'>Data structures</a></li><li><a class="l" href="#pf193" data-dest-detail='[403,"XYZ",0,598.606,null]'>Graphs</a></li><li><a class="l" href="#pf193" data-dest-detail='[403,"XYZ",0,471.169,null]'>Sorting Algorithms</a></li><li><a class="l" href="#pf194" data-dest-detail='[404,"XYZ",0,598.606,null]'>Searching Algorithms</a></li></ul></li><li><a class="l" href="#pf194" data-dest-detail='[404,"XYZ",0,440.226,null]'>Introduction to the NP-completeness theory</a><ul><li><a class="l" href="#pf195" data-dest-detail='[405,"XYZ",0,169.579,null]'>Impossible problems and heuristic algorithms</a></li></ul></li></ul></li><li><a class="l" href="#pf196" data-dest-detail='[406,"XYZ",0,491.647,null]'>Having fun with algorithms</a></li><li><a class="l" href="#pf197" data-dest-detail='[407,"XYZ",0,366.078,null]'>Summary</a></li></ul></li><li><a class="l" href="#pf198" data-dest-detail='[408,"XYZ",0,591.211,null]'>Other Books You May Enjoy</a></li><li><a class="l" href="#pf19b" data-dest-detail='[411,"XYZ",0,591.211,null]'>Index</a></li></ul>